import React, { useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { useForm } from 'react-hook-form';
import { Form } from '@/components/ui/form';
import { ArrowLeft } from 'lucide-react';
import { toast } from 'sonner';
import { useCalendarStore } from '@/store/calendar-store';
import { SleepSchedule } from '@/types';
import CalendarBasicDetails from '@/components/calendar-form/CalendarBasicDetails';
import CalendarFeatures from '@/components/calendar-form/CalendarFeatures';
import { useStableAiEventState } from '@/hooks/useStableAiEventState';
import AIGeneratorSection from '@/components/calendar/AIGeneratorSection';

interface FormData {
  name: string;
  description: string;
  color: string;
  showHolidays: boolean;
  sleepSchedule: SleepSchedule;
}

const EditCalendar = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { calendars, updateCalendar, addEvent } = useCalendarStore();

  // Find the right calendar and its AI events only
  const calendar = calendars.find(cal => cal.id === id);

  // Only get events generated by AI for this specific calendarId
  const aiInitialEvents = (calendar?.events.filter(
    e => e.isAIGenerated && e.calendarId === id
  ) || []);

  // Robust per-calendar AI state
  const {
    events: aiEvents,
    setEvents: setAiEvents,
    deleteEvent: deleteAiEvent,
    clearEvents: clearAiEvents,
  } = useStableAiEventState({
    calendarId: id,
    initialEvents: aiInitialEvents,
  });

  const form = useForm<FormData>({
    defaultValues: {
      name: calendar?.name || '',
      description: calendar?.description || '',
      color: calendar?.color || '#8B5CF6',
      showHolidays: calendar?.showHolidays !== undefined ? calendar.showHolidays : true,
      sleepSchedule: { enabled: false, startTime: '22:00', endTime: '06:00' }
    },
  });

  useEffect(() => {
    if (!calendar && id) {
      toast.error('Calendar not found');
      navigate('/');
    }
  }, [calendar, id, navigate]);

  // Save operation: persist aiEvents only for this calendar, replacing only AI-generated (keep manual ones)
  const onSubmit = (data: FormData) => {
    if (id) {
      updateCalendar(id, {
        name: data.name,
        description: data.description,
        color: data.color,
        showHolidays: data.showHolidays
      });

      if (calendar) {
        // Remove old AI events, keep others
        const nonAiEvents = calendar.events.filter(
          event => !event.isAIGenerated || event.calendarId !== id
        );
        updateCalendar(id, { events: nonAiEvents });

        // Add all previewed AI events (belonging to THIS calendar only)
        if (aiEvents.length > 0) {
          let addedCount = 0;
          for (const event of aiEvents) {
            try {
              const eventWithDates = {
                ...event,
                start: new Date(event.start),
                end: new Date(event.end),
                recurrence: event.recurrence
                  ? {
                      ...event.recurrence,
                      endDate: event.recurrence.endDate
                        ? new Date(event.recurrence.endDate)
                        : undefined,
                    }
                  : undefined,
                isAIGenerated: true,
                calendarId: id,
              };
              addEvent(id, eventWithDates);
              addedCount++;
            } catch (err) {
              console.error('Error adding AI-generated event:', err, event);
            }
          }
          if (addedCount > 0) {
            toast.success(`Added ${addedCount} AI-generated events to your calendar`);
          }
        }
      }

      toast.success('Calendar updated successfully');
      navigate(`/calendar/${id}`);
    }
  };

  if (!calendar) {
    return null;
  }

  function generateTimeOptions() {
    const options = [];
    for (let hour = 0; hour < 24; hour++) {
      for (let min = 0; min < 60; min += 30) {
        const h = hour.toString().padStart(2, '0');
        const m = min.toString().padStart(2, '0');
        options.push({ value: `${h}:${m}`, label: formatTimeDisplay(`${h}:${m}`) });
      }
    }
    return options;
  }

  function formatTimeDisplay(time: string) {
    const [hours, minutes] = time.split(':');
    const h = parseInt(hours, 10);
    const period = h < 12 ? 'AM' : 'PM';
    const hour = h % 12 || 12;
    return `${hour}:${minutes} ${period}`;
  }

  const timeOptions = generateTimeOptions();

  return (
    <div className="container max-w-xl pt-10 pb-20">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => navigate(`/calendar/${id}`)}
          className="mb-6"
        >
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Calendar
        </Button>
        <h1 className="text-2xl font-bold mb-2">Edit Calendar</h1>
        <p className="text-muted-foreground">
          Update your calendar settings.
        </p>
      </div>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <CalendarBasicDetails form={form} />
          <h2 className="text-lg font-semibold mb-3">Quick Start with AI</h2>
          <AIGeneratorSection
            aiEvents={aiEvents}
            setAiEvents={setAiEvents}
            deleteAiEvent={deleteAiEvent}
            clearAllEvents={clearAiEvents}
            calendarId={id}
          />
          <CalendarFeatures form={form} timeOptions={timeOptions} />
          <div className="flex justify-end">
            <Button type="submit">Save Changes</Button>
          </div>
        </form>
      </Form>
    </div>
  );
};

export default EditCalendar;


import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Parse request body
    const { calendarDetails } = await req.json();
    console.log("Received request to generate calendar with details:", calendarDetails);

    if (!calendarDetails || typeof calendarDetails !== 'string') {
      console.error("Invalid calendar details:", calendarDetails);
      return new Response(
        JSON.stringify({ 
          error: 'Invalid request: calendar details must be a string' 
        }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Process calendar details and generate events (mock implementation)
    // In a real implementation, you would call an AI service here
    const currentDate = new Date();
    const tomorrow = new Date();
    tomorrow.setDate(currentDate.getDate() + 1);
    
    // Example events - in a real implementation, these would be generated by AI
    const events = [
      {
        title: "Example Meeting",
        description: "This is an example event generated to demonstrate the feature",
        start: new Date().toISOString(),
        end: new Date(currentDate.getTime() + 60 * 60 * 1000).toISOString(),
        allDay: false,
        color: "#4285F4"
      },
      {
        title: "Example All-Day Event",
        description: "This is an example all-day event",
        start: tomorrow.toISOString(),
        end: tomorrow.toISOString(),
        allDay: true,
        color: "#0F9D58"
      }
    ];
    
    console.log("Generated events:", events);

    // Return the events
    return new Response(
      JSON.stringify({ events }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error("Error generating calendar:", error);
    return new Response(
      JSON.stringify({ 
        error: `Server error: ${error.message || "Unknown error"}` 
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
